/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { MaildomainsUsersListParams, User } from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Search users by email, first name and last name.
 */
export type maildomainsUsersListResponse200 = {
  data: User[];
  status: 200;
};

export type maildomainsUsersListResponseComposite =
  maildomainsUsersListResponse200;

export type maildomainsUsersListResponse =
  maildomainsUsersListResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsUsersListUrl = (
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/maildomains/${maildomainPk}/users/?${stringifiedParams}`
    : `/api/v1.0/maildomains/${maildomainPk}/users/`;
};

export const maildomainsUsersList = async (
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
  options?: RequestInit,
): Promise<maildomainsUsersListResponse> => {
  return fetchAPI<maildomainsUsersListResponse>(
    getMaildomainsUsersListUrl(maildomainPk, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMaildomainsUsersListQueryKey = (
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
) => {
  return [
    `/api/v1.0/maildomains/${maildomainPk}/users/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getMaildomainsUsersListQueryOptions = <
  TData = Awaited<ReturnType<typeof maildomainsUsersList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsUsersList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMaildomainsUsersListQueryKey(maildomainPk, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof maildomainsUsersList>>
  > = ({ signal }) =>
    maildomainsUsersList(maildomainPk, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!maildomainPk,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof maildomainsUsersList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MaildomainsUsersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsUsersList>>
>;
export type MaildomainsUsersListQueryError = unknown;

export function useMaildomainsUsersList<
  TData = Awaited<ReturnType<typeof maildomainsUsersList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params: undefined | MaildomainsUsersListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsUsersList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsUsersList>>,
          TError,
          Awaited<ReturnType<typeof maildomainsUsersList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsUsersList<
  TData = Awaited<ReturnType<typeof maildomainsUsersList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsUsersList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsUsersList>>,
          TError,
          Awaited<ReturnType<typeof maildomainsUsersList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsUsersList<
  TData = Awaited<ReturnType<typeof maildomainsUsersList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsUsersList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMaildomainsUsersList<
  TData = Awaited<ReturnType<typeof maildomainsUsersList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsUsersListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsUsersList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMaildomainsUsersListQueryOptions(
    maildomainPk,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
