/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  PaginatedPromptEvaluationList,
  PromptEvaluation,
  PromptEvaluationEvaluateCreate201,
  PromptEvaluationListParams,
  PromptEvaluationRequest,
  PromptEvaluationRequestRequest,
} from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type promptEvaluationListResponse200 = {
  data: PaginatedPromptEvaluationList;
  status: 200;
};

export type promptEvaluationListResponseComposite =
  promptEvaluationListResponse200;

export type promptEvaluationListResponse =
  promptEvaluationListResponseComposite & {
    headers: Headers;
  };

export const getPromptEvaluationListUrl = (
  params?: PromptEvaluationListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/prompt-evaluation/?${stringifiedParams}`
    : `/api/v1.0/prompt-evaluation/`;
};

export const promptEvaluationList = async (
  params?: PromptEvaluationListParams,
  options?: RequestInit,
): Promise<promptEvaluationListResponse> => {
  return fetchAPI<promptEvaluationListResponse>(
    getPromptEvaluationListUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getPromptEvaluationListQueryKey = (
  params?: PromptEvaluationListParams,
) => {
  return [`/api/v1.0/prompt-evaluation/`, ...(params ? [params] : [])] as const;
};

export const getPromptEvaluationListQueryOptions = <
  TData = Awaited<ReturnType<typeof promptEvaluationList>>,
  TError = unknown,
>(
  params?: PromptEvaluationListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPromptEvaluationListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof promptEvaluationList>>
  > = ({ signal }) =>
    promptEvaluationList(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof promptEvaluationList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PromptEvaluationListQueryResult = NonNullable<
  Awaited<ReturnType<typeof promptEvaluationList>>
>;
export type PromptEvaluationListQueryError = unknown;

export function usePromptEvaluationList<
  TData = Awaited<ReturnType<typeof promptEvaluationList>>,
  TError = unknown,
>(
  params: undefined | PromptEvaluationListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof promptEvaluationList>>,
          TError,
          Awaited<ReturnType<typeof promptEvaluationList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePromptEvaluationList<
  TData = Awaited<ReturnType<typeof promptEvaluationList>>,
  TError = unknown,
>(
  params?: PromptEvaluationListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof promptEvaluationList>>,
          TError,
          Awaited<ReturnType<typeof promptEvaluationList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePromptEvaluationList<
  TData = Awaited<ReturnType<typeof promptEvaluationList>>,
  TError = unknown,
>(
  params?: PromptEvaluationListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePromptEvaluationList<
  TData = Awaited<ReturnType<typeof promptEvaluationList>>,
  TError = unknown,
>(
  params?: PromptEvaluationListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPromptEvaluationListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type promptEvaluationCreateResponse201 = {
  data: PromptEvaluation;
  status: 201;
};

export type promptEvaluationCreateResponseComposite =
  promptEvaluationCreateResponse201;

export type promptEvaluationCreateResponse =
  promptEvaluationCreateResponseComposite & {
    headers: Headers;
  };

export const getPromptEvaluationCreateUrl = () => {
  return `/api/v1.0/prompt-evaluation/`;
};

export const promptEvaluationCreate = async (
  promptEvaluationRequest: PromptEvaluationRequest,
  options?: RequestInit,
): Promise<promptEvaluationCreateResponse> => {
  return fetchAPI<promptEvaluationCreateResponse>(
    getPromptEvaluationCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(promptEvaluationRequest),
    },
  );
};

export const getPromptEvaluationCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof promptEvaluationCreate>>,
    TError,
    { data: PromptEvaluationRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof promptEvaluationCreate>>,
  TError,
  { data: PromptEvaluationRequest },
  TContext
> => {
  const mutationKey = ["promptEvaluationCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof promptEvaluationCreate>>,
    { data: PromptEvaluationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return promptEvaluationCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PromptEvaluationCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof promptEvaluationCreate>>
>;
export type PromptEvaluationCreateMutationBody = PromptEvaluationRequest;
export type PromptEvaluationCreateMutationError = unknown;

export const usePromptEvaluationCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof promptEvaluationCreate>>,
      TError,
      { data: PromptEvaluationRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof promptEvaluationCreate>>,
  TError,
  { data: PromptEvaluationRequest },
  TContext
> => {
  const mutationOptions = getPromptEvaluationCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export type promptEvaluationRetrieveResponse200 = {
  data: PromptEvaluation;
  status: 200;
};

export type promptEvaluationRetrieveResponseComposite =
  promptEvaluationRetrieveResponse200;

export type promptEvaluationRetrieveResponse =
  promptEvaluationRetrieveResponseComposite & {
    headers: Headers;
  };

export const getPromptEvaluationRetrieveUrl = (id: string) => {
  return `/api/v1.0/prompt-evaluation/${id}/`;
};

export const promptEvaluationRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<promptEvaluationRetrieveResponse> => {
  return fetchAPI<promptEvaluationRetrieveResponse>(
    getPromptEvaluationRetrieveUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getPromptEvaluationRetrieveQueryKey = (id: string) => {
  return [`/api/v1.0/prompt-evaluation/${id}/`] as const;
};

export const getPromptEvaluationRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPromptEvaluationRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof promptEvaluationRetrieve>>
  > = ({ signal }) =>
    promptEvaluationRetrieve(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PromptEvaluationRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof promptEvaluationRetrieve>>
>;
export type PromptEvaluationRetrieveQueryError = unknown;

export function usePromptEvaluationRetrieve<
  TData = Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof promptEvaluationRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePromptEvaluationRetrieve<
  TData = Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof promptEvaluationRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePromptEvaluationRetrieve<
  TData = Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePromptEvaluationRetrieve<
  TData = Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof promptEvaluationRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPromptEvaluationRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type promptEvaluationDestroyResponse204 = {
  data: void;
  status: 204;
};

export type promptEvaluationDestroyResponseComposite =
  promptEvaluationDestroyResponse204;

export type promptEvaluationDestroyResponse =
  promptEvaluationDestroyResponseComposite & {
    headers: Headers;
  };

export const getPromptEvaluationDestroyUrl = (id: string) => {
  return `/api/v1.0/prompt-evaluation/${id}/`;
};

export const promptEvaluationDestroy = async (
  id: string,
  options?: RequestInit,
): Promise<promptEvaluationDestroyResponse> => {
  return fetchAPI<promptEvaluationDestroyResponse>(
    getPromptEvaluationDestroyUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getPromptEvaluationDestroyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof promptEvaluationDestroy>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof promptEvaluationDestroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["promptEvaluationDestroy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof promptEvaluationDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return promptEvaluationDestroy(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PromptEvaluationDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof promptEvaluationDestroy>>
>;

export type PromptEvaluationDestroyMutationError = unknown;

export const usePromptEvaluationDestroy = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof promptEvaluationDestroy>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof promptEvaluationDestroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPromptEvaluationDestroyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export type promptEvaluationEvaluateCreateResponse201 = {
  data: PromptEvaluationEvaluateCreate201;
  status: 201;
};

export type promptEvaluationEvaluateCreateResponse403 = {
  data: unknown;
  status: 403;
};

export type promptEvaluationEvaluateCreateResponseComposite =
  | promptEvaluationEvaluateCreateResponse201
  | promptEvaluationEvaluateCreateResponse403;

export type promptEvaluationEvaluateCreateResponse =
  promptEvaluationEvaluateCreateResponseComposite & {
    headers: Headers;
  };

export const getPromptEvaluationEvaluateCreateUrl = () => {
  return `/api/v1.0/prompt-evaluation/evaluate/`;
};

export const promptEvaluationEvaluateCreate = async (
  promptEvaluationRequestRequest: PromptEvaluationRequestRequest,
  options?: RequestInit,
): Promise<promptEvaluationEvaluateCreateResponse> => {
  return fetchAPI<promptEvaluationEvaluateCreateResponse>(
    getPromptEvaluationEvaluateCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(promptEvaluationRequestRequest),
    },
  );
};

export const getPromptEvaluationEvaluateCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof promptEvaluationEvaluateCreate>>,
    TError,
    { data: PromptEvaluationRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof promptEvaluationEvaluateCreate>>,
  TError,
  { data: PromptEvaluationRequestRequest },
  TContext
> => {
  const mutationKey = ["promptEvaluationEvaluateCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof promptEvaluationEvaluateCreate>>,
    { data: PromptEvaluationRequestRequest }
  > = (props) => {
    const { data } = props ?? {};

    return promptEvaluationEvaluateCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PromptEvaluationEvaluateCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof promptEvaluationEvaluateCreate>>
>;
export type PromptEvaluationEvaluateCreateMutationBody =
  PromptEvaluationRequestRequest;
export type PromptEvaluationEvaluateCreateMutationError = unknown;

export const usePromptEvaluationEvaluateCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof promptEvaluationEvaluateCreate>>,
      TError,
      { data: PromptEvaluationRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof promptEvaluationEvaluateCreate>>,
  TError,
  { data: PromptEvaluationRequestRequest },
  TContext
> => {
  const mutationOptions =
    getPromptEvaluationEvaluateCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
