/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  ChatbotAnswerOutput,
  ChatbotBatchOutput,
  ChatbotClassifyOutput,
  ChatbotInputRequest,
  ChatbotSummarizeOutput,
} from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 
        Generate an AI response to an email.
        
        Requires original_mail content. Optional context, tone (professional/friendly/formal),
        and language (french/english) parameters can customize the response style.
        
 */
export type chatbotApiAnswerCreateResponse200 = {
  data: ChatbotAnswerOutput;
  status: 200;
};

export type chatbotApiAnswerCreateResponseComposite =
  chatbotApiAnswerCreateResponse200;

export type chatbotApiAnswerCreateResponse =
  chatbotApiAnswerCreateResponseComposite & {
    headers: Headers;
  };

export const getChatbotApiAnswerCreateUrl = () => {
  return `/api/v1.0/chatbot/api/answer`;
};

export const chatbotApiAnswerCreate = async (
  chatbotInputRequest: ChatbotInputRequest,
  options?: RequestInit,
): Promise<chatbotApiAnswerCreateResponse> => {
  return fetchAPI<chatbotApiAnswerCreateResponse>(
    getChatbotApiAnswerCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(chatbotInputRequest),
    },
  );
};

export const getChatbotApiAnswerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatbotApiAnswerCreate>>,
    TError,
    { data: ChatbotInputRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatbotApiAnswerCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationKey = ["chatbotApiAnswerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatbotApiAnswerCreate>>,
    { data: ChatbotInputRequest }
  > = (props) => {
    const { data } = props ?? {};

    return chatbotApiAnswerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatbotApiAnswerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatbotApiAnswerCreate>>
>;
export type ChatbotApiAnswerCreateMutationBody = ChatbotInputRequest;
export type ChatbotApiAnswerCreateMutationError = unknown;

export const useChatbotApiAnswerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chatbotApiAnswerCreate>>,
      TError,
      { data: ChatbotInputRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof chatbotApiAnswerCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationOptions = getChatbotApiAnswerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        Process multiple emails in batch using AI operations.
        
        Requires an array of mail objects and an operation type (summarize/classify/answer).
        Each mail object should contain content, sender, and subject fields. Optional
        context and tone fields for answer generation.
        
 */
export type chatbotApiBatchCreateResponse200 = {
  data: ChatbotBatchOutput;
  status: 200;
};

export type chatbotApiBatchCreateResponseComposite =
  chatbotApiBatchCreateResponse200;

export type chatbotApiBatchCreateResponse =
  chatbotApiBatchCreateResponseComposite & {
    headers: Headers;
  };

export const getChatbotApiBatchCreateUrl = () => {
  return `/api/v1.0/chatbot/api/batch`;
};

export const chatbotApiBatchCreate = async (
  chatbotInputRequest: ChatbotInputRequest,
  options?: RequestInit,
): Promise<chatbotApiBatchCreateResponse> => {
  return fetchAPI<chatbotApiBatchCreateResponse>(
    getChatbotApiBatchCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(chatbotInputRequest),
    },
  );
};

export const getChatbotApiBatchCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatbotApiBatchCreate>>,
    TError,
    { data: ChatbotInputRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatbotApiBatchCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationKey = ["chatbotApiBatchCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatbotApiBatchCreate>>,
    { data: ChatbotInputRequest }
  > = (props) => {
    const { data } = props ?? {};

    return chatbotApiBatchCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatbotApiBatchCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatbotApiBatchCreate>>
>;
export type ChatbotApiBatchCreateMutationBody = ChatbotInputRequest;
export type ChatbotApiBatchCreateMutationError = unknown;

export const useChatbotApiBatchCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chatbotApiBatchCreate>>,
      TError,
      { data: ChatbotInputRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof chatbotApiBatchCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationOptions = getChatbotApiBatchCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        Classify an email into predefined or custom categories using AI.
        
        Requires mail_content as input. Optional custom_categories array can override
        default classification categories. Returns the predicted category and confidence score.
        
 */
export type chatbotApiClassifyCreateResponse200 = {
  data: ChatbotClassifyOutput;
  status: 200;
};

export type chatbotApiClassifyCreateResponseComposite =
  chatbotApiClassifyCreateResponse200;

export type chatbotApiClassifyCreateResponse =
  chatbotApiClassifyCreateResponseComposite & {
    headers: Headers;
  };

export const getChatbotApiClassifyCreateUrl = () => {
  return `/api/v1.0/chatbot/api/classify`;
};

export const chatbotApiClassifyCreate = async (
  chatbotInputRequest: ChatbotInputRequest,
  options?: RequestInit,
): Promise<chatbotApiClassifyCreateResponse> => {
  return fetchAPI<chatbotApiClassifyCreateResponse>(
    getChatbotApiClassifyCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(chatbotInputRequest),
    },
  );
};

export const getChatbotApiClassifyCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatbotApiClassifyCreate>>,
    TError,
    { data: ChatbotInputRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatbotApiClassifyCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationKey = ["chatbotApiClassifyCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatbotApiClassifyCreate>>,
    { data: ChatbotInputRequest }
  > = (props) => {
    const { data } = props ?? {};

    return chatbotApiClassifyCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatbotApiClassifyCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatbotApiClassifyCreate>>
>;
export type ChatbotApiClassifyCreateMutationBody = ChatbotInputRequest;
export type ChatbotApiClassifyCreateMutationError = unknown;

export const useChatbotApiClassifyCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chatbotApiClassifyCreate>>,
      TError,
      { data: ChatbotInputRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof chatbotApiClassifyCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationOptions = getChatbotApiClassifyCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        Generate a summary of an email using AI.
        
        Requires mail_content as input. Optional sender and subject fields
        can provide additional context for better summarization.
        
 */
export type chatbotApiSummarizeCreateResponse200 = {
  data: ChatbotSummarizeOutput;
  status: 200;
};

export type chatbotApiSummarizeCreateResponseComposite =
  chatbotApiSummarizeCreateResponse200;

export type chatbotApiSummarizeCreateResponse =
  chatbotApiSummarizeCreateResponseComposite & {
    headers: Headers;
  };

export const getChatbotApiSummarizeCreateUrl = () => {
  return `/api/v1.0/chatbot/api/summarize`;
};

export const chatbotApiSummarizeCreate = async (
  chatbotInputRequest: ChatbotInputRequest,
  options?: RequestInit,
): Promise<chatbotApiSummarizeCreateResponse> => {
  return fetchAPI<chatbotApiSummarizeCreateResponse>(
    getChatbotApiSummarizeCreateUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(chatbotInputRequest),
    },
  );
};

export const getChatbotApiSummarizeCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatbotApiSummarizeCreate>>,
    TError,
    { data: ChatbotInputRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chatbotApiSummarizeCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationKey = ["chatbotApiSummarizeCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatbotApiSummarizeCreate>>,
    { data: ChatbotInputRequest }
  > = (props) => {
    const { data } = props ?? {};

    return chatbotApiSummarizeCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatbotApiSummarizeCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatbotApiSummarizeCreate>>
>;
export type ChatbotApiSummarizeCreateMutationBody = ChatbotInputRequest;
export type ChatbotApiSummarizeCreateMutationError = unknown;

export const useChatbotApiSummarizeCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chatbotApiSummarizeCreate>>,
      TError,
      { data: ChatbotInputRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof chatbotApiSummarizeCreate>>,
  TError,
  { data: ChatbotInputRequest },
  TContext
> => {
  const mutationOptions = getChatbotApiSummarizeCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
