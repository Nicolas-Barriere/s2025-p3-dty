import os
import json
from typing import Optional
from core.models import Thread
from core.services.ai_service import AIService
from core.ai.thread_summarizer import get_messages_from_thread, Message

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROMPTS_FILE_PATH = os.path.join(BASE_DIR, "ai_prompts.json")
with open(PROMPTS_FILE_PATH, "r") as f:
    AI_PROMPTS = json.load(f)


def generate_answer_mail(thread: Optional[Thread], draft: str, prompt: str) -> str:
    """
    Generates an answer to a thread using the ALBERT model.
    Args:
        thread (Thread): Thread to answer.
    Returns:
        str: Answer to the thread.
    """

    # Prepare the prompt for the AI model
    messages = get_messages_from_thread(thread) if thread else []
    conversation_text = "\n\n".join([str(message) for message in messages]) if messages else ""
    
    role = AI_PROMPTS["answer_mail"]["role"]
    answer_rules = AI_PROMPTS["answer_mail"]["answer_rules"]
    global_prompt_template = AI_PROMPTS["answer_mail"]["global_prompt_template"]
    example = AI_PROMPTS["answer_mail"]["example"]

    global_prompt = global_prompt_template.format(
        role=role,
        answer_rules=answer_rules,
        thread_context=conversation_text,
        example=example,
        draft=draft,
    )
    print(global_prompt)
    answer = AIService().call_ai_api_with_extra_instructions(global_prompt, prompt)
    return answer


def generate_new_mail(draft: str, prompt: str) -> str:
    """
    Generates a new mail using the ALBERT model.
    Args:
        draft (Str): Message draft.
        prompt (Str): user prompt for the AI assistant.
    Returns:
        str: Message generated by the AI assistant.
    """
    role = AI_PROMPTS["new_mail"]["role"]
    answer_rules = AI_PROMPTS["new_mail"]["answer_rules"]
    global_prompt_template = AI_PROMPTS["new_mail"]["global_prompt_template"]
    example = AI_PROMPTS["new_mail"]["example"]

    global_prompt = global_prompt_template.format(
        role=role,
        answer_rules=answer_rules,
        example=example,
        draft=draft,
    )
    print(global_prompt)
    answer = AIService().call_ai_api_with_extra_instructions(global_prompt, prompt)
    return answer